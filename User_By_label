@RestResource(urlMapping='/CalendarUserListByLabel/*')
global class User_By_label {
    @HttpPost
    global static void getLabelList(String UserId, String LabelId) {
        Map<String, Object> response = new Map<String, Object>();
        
        try {
            // Create a list to store filtered customer data
            List<Map<String, Object>> friendsList = new List<Map<String, Object>>();

            // Query Friend__c records based on UserId
            List<Friend__c> friendRecords;

            if (String.isNotBlank(LabelId)) {
                // When LabelId is not null, filter by LabelId
                friendRecords = [SELECT Id, Name, Label__c, Customer__r.Id FROM Friend__c WHERE Customer__r.Id = :UserId AND Label__c = :LabelId];
            } else {
                // When LabelId is null, fetch all records for the UserId
                friendRecords = [SELECT Id, Name, Label__c, Customer__r.Id FROM Friend__c WHERE Customer__r.Id = :UserId];
            }

            // Iterate through Friend__c records
            for (Friend__c friend : friendRecords) {
                Map<String, Object> friendData = new Map<String, Object>();

                // Query associated Customer__c record
                List<Customer__c> customers = [SELECT Id, Name, Last_Name__c, Label__r.Name FROM Customer__c WHERE Id = :friend.Name];

                for (Customer__c customer : customers) {
                    friendData.put('Label', customer.Label__r.Name);
                    friendData.put('LastName', customer.Last_Name__c);
                    friendData.put('FirstName', customer.Name);
                    friendData.put('AccountId', customer.Id);

                    // Query the ContentDocumentLink object with the ContentDocumentId field included
                    List<ContentDocumentLink> contentDocumentLinks = [SELECT Id, ContentDocumentId FROM ContentDocumentLink WHERE LinkedEntityId = :customer.Id];

                    for (ContentDocumentLink contentDocumentLink : contentDocumentLinks) {
                        // Get the ContentDocumentId
                        Id contentDocumentId = contentDocumentLink.ContentDocumentId;
                        // Query the ContentDistribution associated with the ContentDocumentId
                        List<ContentDistribution> contentDistributions = [SELECT Id, DistributionPublicUrl FROM ContentDistribution 
                                                                         WHERE ContentVersionId IN (SELECT Id FROM ContentVersion WHERE ContentDocumentId = :contentDocumentId) LIMIT 1];  
                        if (contentDistributions.size() > 0) {
                            ContentDistribution contentDistribution = contentDistributions[0]; 
                            // Get the public link URL from ContentDistribution
                            String publicLinkUrl = contentDistribution.DistributionPublicUrl;
                            friendData.put('ImageUrl', publicLinkUrl);
                        }
                    }

                    friendsList.add(friendData);
                }
            }

            // Add the list of filtered customer data to the response
            response.put('FriendsList', friendsList);
            response.put('Status', 'Success');
        } catch (Exception ex) {
            response.put('Status', 'Failed');
            response.put('message', ex.getMessage());
        }
 
        String jsonResponse = JSON.serialize(response);

        // Return the JSON response
        RestContext.response.addHeader('Content-Type', 'application/json');
        RestContext.response.responseBody = Blob.valueOf(jsonResponse);
    }
}
