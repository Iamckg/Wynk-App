@RestResource(urlMapping='/GroupMemberIsTentative/*')
global class GroupMember_IsTentative_Api {
    @HttpPost
    global static void MarkAsTentative(String GroupId, String MemberId) {
        Map<String, Object> response = new Map<String, Object>();

        try {
            Group_Member__c memberToUpdate = [SELECT Id, Name, MemberId__c, IsJoined__c, isTentative__c, Pending__c, Declined__c, Group__c, Group__r.Name, Group__r.Customer__c
                FROM Group_Member__c WHERE MemberId__c = :MemberId AND Group__c = :GroupId];

            if (memberToUpdate != null) {
                memberToUpdate.isTentative__c = true;
                Update memberToUpdate;

                // Create a list of notifications
                List<User_Notification__c> notifications = new List<User_Notification__c>();

                // Notify the member who marked as tentative
                User_Notification__c userNotification1 = new User_Notification__c();
                userNotification1.Customer__c = MemberId;
                userNotification1.Name = 'Group Tentative';
                userNotification1.Message__c = 'You have marked as tentative for the ' + memberToUpdate.Group__r.Name + ' Group';
                notifications.add(userNotification1);

                // Notify the group owner
                User_Notification__c groupOwnerNotification = new User_Notification__c();
                groupOwnerNotification.Customer__c = memberToUpdate.Group__r.Customer__c;
                groupOwnerNotification.Name = 'Group Request Tentative';
                groupOwnerNotification.Message__c = 'Your group member ' + memberToUpdate.Name + ' has marked as tentative for the ' + memberToUpdate.Group__r.Name + ' Group';
                notifications.add(groupOwnerNotification);

                // Insert all notifications in a single DML operation
                Insert notifications;

                response.put('message', 'You have marked as tentative successfully.');
                response.put('Status', 'Success');
            } else {
                response.put('message', 'Group Member record not found.');
                response.put('Status', 'Failed');
            }
        } catch (Exception ex) {
            response.put('Status', 'Failed');
            response.put('message', ex.getMessage());
        }

        String jsonResponse = JSON.serialize(response);

        // Return the JSON response
        RestContext.response.addHeader('Content-Type', 'application/json');
        RestContext.response.responseBody = Blob.valueOf(jsonResponse);
    }
}
